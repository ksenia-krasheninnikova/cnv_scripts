#!/usr/bin/env python
'''
script for procesing mrcanavar output. draws copy number to density plot
'''

import bisect
import sys
import argparse
import numpy
from collections import Counter
import matplotlib
matplotlib.use('Agg')
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.pyplot as plt
import pylab as pl
import os
         
color_names = ['purple','firebrick','darkgoldenrod','green', 'darkorange', 'fuchsia', 'cyan','yellow','blue','black','red','gray','coral','plum', 'gold','navy','springgreen','burlywood','darkgreen','crimson','darkkhaki','darkorange','dodgerblue','darksalmon']

def collect_colors():
    colors = []
    for name, hex in matplotlib.colors.cnames.iteritems():
        colors.append(name)
    return colors


def get_density_for_window(point, delta, values, overall) :
    fx = float(len(filter(lambda x: x <= point, values)))/overall
    fx_delta = float(len(filter(lambda x: x <= point + delta, values)))/overall
    return (fx_delta - fx)/delta

def get_density(cnvs):
    q = len(cnvs)
    step = 0.02
    min_val = min(cnvs) 
    max_val = max(cnvs)
    points = []
    for i in pl.frange(min_val, max_val - step, step):
        density = get_density_for_window(i, step, cnvs, q)
        points.append(density)
    return zip(pl.frange(min_val, max_val - step, step), points)

def get_read_depth_control_region(path):
    rd_controls = []
    with open(path) as f:
        for line in f:
            line = line.strip().split()
            if not line or line[-1] == 'N' or line[-1] == 'IS_CONTROL':
                continue
            rd_controls.append(float(line[-2]))
    return rd_controls

if __name__ == '__main__' :
    parser = argparse.ArgumentParser()
    parser.add_argument('paths', nargs='+')
    parser.add_argument('title')
    args = parser.parse_args()
    pp=PdfPages('density_plot.pdf')
    plt.xlabel('Copy number in control regions')
    plt.ylabel('Density')
    i = 0
    for path in args.paths:
        print path
        read_depth = get_read_depth_control_region(path)
        average = numpy.mean(read_depth)
        cnvs = map(lambda x: 2 * x / average, read_depth)
        points = get_density(cnvs)
        name = os.path.splitext(os.path.basename(path))[0]
        name = name.split('.')[0]
        plt.plot([x[0] for x in points], [x[1] for x in points], '-', label=name, color=color_names[i], markersize=3)
        i += 1
    plt.title(args.title)
    plt.legend(fontsize=10)
    plt.savefig(pp, format='pdf')
    pp.close()
